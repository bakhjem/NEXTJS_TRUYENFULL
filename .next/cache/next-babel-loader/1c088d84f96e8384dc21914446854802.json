{"ast":null,"code":"var __jsx = React.createElement;\nimport 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport { Helmet } from 'react-helmet';\nimport Layout from '../../components/MyLayout';\nimport { useRouter } from 'next/router';\nimport { saveNovel } from '../../redux/actions/novelActions';\nimport { Button, Container, Divider, Grid, Header, Icon, Image, List, Menu, Segment, Sidebar, Visibility, Item, Label, Tab } from 'semantic-ui-react';\n\nconst Truyen = props => {\n  return __jsx(Layout, null, __jsx(\"style\", null, `\n  html, body {\n    background-color: #f2f3f5 !important;\n  }\n}\n`), __jsx(Helmet, null, __jsx(\"title\", null, `${props.data.novelsname}`, \" - YYtruyen\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `Truyện ${props.data.novelsname} là tác phẩm của tác giả ${props.data.author}, tiến trình: ${props.data.status}. Vào yytruyen.com để đọc những chương mới nhất của tác phẩm này nhé  `\n  }), __jsx(\"meta\", {\n    name: \"theme-color\",\n    content: \"#008f68\"\n  }), __jsx(\"meta\", {\n    name: \"keywords\",\n    content: \"\\u0111\\u1ECDc truy\\u1EC7n online, truy\\u1EC7n online, truy\\u1EC7n ng\\xF4n t\\xECnh, truy\\u1EC7n ki\\u1EBFm hi\\u1EC7p, truy\\u1EC7n ng\\u01B0\\u1EE3c, s\\u1EE7ng\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${props.data.novelsname}`\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: \"book\"\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: `${props.data.cover}`\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${props.data.des}`\n  }), __jsx(\"meta\", {\n    property: \"og:site_name\",\n    content: \"Yytruyen.com\"\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `http://yytruyen.com/truyen/${props.data.idnovels}`\n  }), __jsx(\"meta\", {\n    property: \"book:author\",\n    content: `${props.data.author}`\n  }), __jsx(\"meta\", {\n    property: \"og:image:width\",\n    content: \"200\"\n  }), __jsx(\"meta\", {\n    property: \"og:image:height\",\n    content: \"300\"\n  }), __jsx(\"script\", {\n    type: \"application/ld+json\"\n  }, `\n                {\n                \"@context\": \"http://schema.org\",\n                \"url\": \"http://yytruyen.com/truyen/${props.data.idnovels}\",\n                \"image\": \"${props.data.cover}\",\n                \"@type\": \"Book\",\n                \"name\": \"${props.data.novelsname}\",\n                \"author\": \"${props.data.author}\",\n                \"description\": \"${props.data.des}\"\n                }\n                `)), __jsx(Segment, {\n    inverted: true,\n    style: {\n      maxHeight: '32.625rem',\n      padding: '1em 0em'\n    },\n    vertical: true\n  }, __jsx(\"div\", {\n    className: \"book-info\"\n  }, __jsx(\"img\", {\n    className: \"glass_background-img\",\n    src: props.data.cover\n  }), __jsx(Container, {\n    style: {}\n  }, __jsx(Grid, null, __jsx(Grid.Column, {\n    mobile: 16,\n    tablet: 4,\n    computer: 4\n  }, __jsx(Image, {\n    fluid: true,\n    className: \"item-img\",\n    src: props.data.cover,\n    style: {\n      height: '22.75rem'\n    }\n  })), __jsx(Grid.Column, {\n    mobile: 16,\n    tablet: 12,\n    computer: 12\n  }, __jsx(Item.Group, {\n    textAlign: \"left\"\n  }, __jsx(Item.Content, null, __jsx(Item.Header, {\n    className: \"book-title\",\n    as: \"h2\"\n  }, props.data.novelsname)), __jsx(Item.Extra, {\n    textAlign: \"left\",\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(\"span\", {\n    className: \"label\"\n  }, \"Author:\"), \" \", props.data.author), __jsx(Item.Extra, {\n    textAlign: \"left\",\n    style: {\n      marginTop: 10\n    }\n  }, \"Genres: \", props.data.genresdata.map(genresdata => __jsx(Link, {\n    as: `/theloai/${genresdata.idgenres}/1`,\n    href: `/theloai/[id]/[page]`\n  }, __jsx(Label, {\n    as: \"a\",\n    color: \"yellow\"\n  }, __jsx(Label.Detail, null, genresdata.genrename))))), __jsx(Item.Extra, {\n    textAlign: \"left\",\n    style: {\n      marginTop: 10\n    }\n  }, __jsx(\"span\", {\n    className: \"label\"\n  }, \"Status:\"), \" \", props.data.status)), __jsx(Link, {\n    as: `/doc/${props.data.idnovels}/${props.data.chapterlist[0].idchapter}`,\n    href: `/doc/[id]/[chapter]`\n  }, __jsx(Button, {\n    size: \"huge\",\n    color: \"yellow\"\n  }, \"READ\"))))))), __jsx(Container, null, __jsx(Grid, null, __jsx(Grid.Column, {\n    className: \"detail-container\",\n    mobile: 16,\n    tablet: 16,\n    computer: 16\n  }, __jsx(Divider, {\n    horizontal: true\n  }, __jsx(Header, {\n    className: \"title-name-bottom\",\n    as: \"h2\"\n  }, \"Synopsis\")), __jsx(Item.Group, {\n    textAlign: \"left\"\n  }, __jsx(Item.Description, {\n    className: \"content\"\n  }, ReactHtmlParser(props.data.description))), __jsx(Divider, {\n    horizontal: true\n  }, __jsx(Header, {\n    className: \"title-name-bottom\",\n    as: \"h2\"\n  }, \"Chapter\")), __jsx(Grid, null, props.data.chapterlist.map((datachapter, key) => __jsx(Grid.Column, {\n    mobile: 16,\n    tablet: 8,\n    computer: 8,\n    style: {\n      wordBreak: 'break-word',\n      overflow: 'hidden'\n    }\n  }, __jsx(Link, {\n    as: `/doc/${props.data.idnovels}/${datachapter.idchapter}`,\n    href: `/doc/[id]/[chapter]`\n  }, __jsx(\"a\", {\n    className: \"chapter\"\n  }, datachapter.chaptername)), __jsx(Divider, {\n    inverted: true\n  }))))))));\n};\n\nexport async function getServerSideProps({\n  query: {\n    id\n  }\n}) {\n  // `getStaticProps` is invoked on the server-side,\n  // so this `fetcher` function will be executed on the server-side.\n  const res = await fetch(`http://localhost:8001/novel?id=${id}`);\n  const data = await res.json();\n  return {\n    props: {\n      data: data\n    }\n  };\n} // class Truyen extends React.Component {\n//     // static getInitialProps({ store }) { }\n//     constructor(props) {\n//         super(props);\n//     }\n//     componentDidMount() {\n//         console.log( props.data)\n//          props.saveNovel( props.data)\n//     }\n//     // static async getInitialProps({ query: { id } }) {\n//     //     // eslint-disable-next-line no-undef\n//     //     // const { id } = context.query\n//     //     // const router = useRouter()\n//     //     // const { id } = router.query\n//     //     const res = await fetch(`http://localhost:8001/novel?id=${id}`)\n//     //     const json = await res.json()\n//     //     // console.log(json)\n//     //     return { data: json }\n//     // }\n//     render() {\n//         console.log( props)\n//         return (\n//             <Layout>\n//                 <style>\n//                     {`\n//       html, body {\n//         background-color: #f2f3f5 !important;\n//       }\n//     }\n//     `}\n//                 </style>\n//                 <Helmet>\n//                     <title>{`${ props.data.novelsname}`} - YYtruyen</title>\n//                     <meta name=\"description\" content={`Truyện ${ props.data.novelsname} là tác phẩm của tác giả ${ props.data.author}, tiến trình: ${ props.data.status}. Vào yytruyen.com để đọc những chương mới nhất của tác phẩm này nhé  `} />\n//                     <meta name=\"theme-color\" content=\"#008f68\" />\n//                     <meta name=\"keywords\" content=\"đọc truyện online, truyện online, truyện ngôn tình, truyện kiếm hiệp, truyện ngược, sủng\" />\n//                     <meta property=\"og:title\" content={`${ props.data.novelsname}`} />\n//                     <meta property=\"og:type\" content=\"book\" />\n//                     <meta property=\"og:image\" content={`${ props.data.cover}`} />\n//                     <meta property=\"og:description\" content={`${ props.data.des}`} />\n//                     <meta property=\"og:site_name\" content=\"Yytruyen.com\" />\n//                     <meta property=\"og:url\" content={`http://yytruyen.com/truyen/${ props.data.idnovels}`} />\n//                     <meta property=\"book:author\" content={`${ props.data.author}`} />\n//                     <meta property=\"og:image:width\" content=\"200\" />\n//                     <meta property=\"og:image:height\" content=\"300\" />\n//                     <script type=\"application/ld+json\">{`\n//                     {\n//                     \"@context\": \"http://schema.org\",\n//                     \"url\": \"http://yytruyen.com/truyen/${ props.data.idnovels}\",\n//                     \"image\": \"${ props.data.cover}\",\n//                     \"@type\": \"Book\",\n//                     \"name\": \"${ props.data.novelsname}\",\n//                     \"author\": \"${ props.data.author}\",\n//                     \"description\": \"${ props.data.des}\"\n//                     }\n//                     `}</script>\n//                 </Helmet>\n//                 <Segment\n//                     inverted\n//                     style={{ maxHeight: '32.625rem', padding: '1em 0em' }}\n//                     vertical\n//                 >\n//                     <div className='book-info'>\n//                         <img className='glass_background-img' src={ props.data.cover} />\n//                         <Container style={{}}>\n//                             <Grid>\n//                                 <Grid.Column mobile={16} tablet={4} computer={4}>\n//                                     <Image fluid className='item-img' src={ props.data.cover} style={{ height: '22.75rem' }} />\n//                                 </Grid.Column>\n//                                 <Grid.Column mobile={16} tablet={12} computer={12}>\n//                                     <Item.Group textAlign='left'>\n//                                         <Item.Content>\n//                                             <Item.Header className='book-title' as='h2'>{ props.data.novelsname}</Item.Header>\n//                                         </Item.Content>\n//                                         <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\n//                                             <span className='label'>Author:</span> { props.data.author}\n//                                         </Item.Extra>\n//                                         <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\n//                                             Genres: { props.data.genresdata.map(genresdata => (\n//                                             <Link as={`/theloai/${genresdata.idgenres}/1`} href={`/theloai/[id]/[page]`}>\n//                                                 <Label as='a' color='yellow'>\n//                                                     <Label.Detail>{genresdata.genrename}</Label.Detail>\n//                                                 </Label>\n//                                             </Link>\n//                                         ))}\n//                                         </Item.Extra>\n//                                         <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\n//                                             <span className='label'>Status:</span> { props.data.status}\n//                                         </Item.Extra>\n//                                     </Item.Group>\n//                                     <Link\n//                                         as={`/doc/${ props.data.idnovels}/${ props.data.chapterlist[0].idchapter}`}\n//                                         href={`/doc/[id]/[chapter]`}>\n//                                         <Button size='huge' color='yellow'>READ</Button>\n//                                     </Link>\n//                                 </Grid.Column>\n//                             </Grid>\n//                         </Container>\n//                     </div>\n//                 </Segment>\n//                 <Container>\n//                     <Grid>\n//                         <Grid.Column className='detail-container' mobile={16} tablet={16} computer={16}>\n//                             <Divider horizontal>\n//                                 <Header className='title-name-bottom' as='h2'>Synopsis</Header>\n//                             </Divider>\n//                             <Item.Group textAlign='left'>\n//                                 <Item.Description className='content'>\n//                                     {ReactHtmlParser( props.data.description)}\n//                                 </Item.Description>\n//                             </Item.Group>\n//                             <Divider horizontal>\n//                                 <Header className='title-name-bottom' as='h2'>Chapter</Header>\n//                             </Divider>\n//                             <Grid>\n//                                 { props.data.chapterlist.map((datachapter, key) => (\n//                                     <Grid.Column mobile={16} tablet={8} computer={8} style={{ wordBreak: 'break-word', overflow: 'hidden' }}>\n//                                         <Link\n//                                             as={`/doc/${ props.data.idnovels}/${datachapter.idchapter}`}\n//                                             href={`/doc/[id]/[chapter]`}>\n//                                             <a className='chapter'>{datachapter.chaptername}</a>\n//                                         </Link>\n//                                         <Divider inverted></Divider>\n//                                     </Grid.Column>\n//                                 ))}\n//                             </Grid>\n//                         </Grid.Column>\n//                     </Grid>\n//                 </Container>\n//             </Layout>\n//         )\n//     }\n// }\n\nfunction mapStateToProps(state) {\n  return {\n    novelReducer: state.novelReducer\n  };\n}\n\nexport default connect(mapStateToProps, {\n  saveNovel\n})(Truyen);","map":{"version":3,"sources":["C:/Users/bakhjem/Desktop/nhattin/nextjstruyen/pages/truyen/[id].js"],"names":["Link","React","connect","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Helmet","Layout","useRouter","saveNovel","Button","Container","Divider","Grid","Header","Icon","Image","List","Menu","Segment","Sidebar","Visibility","Item","Label","Tab","Truyen","props","data","novelsname","author","status","cover","des","idnovels","maxHeight","padding","height","marginTop","genresdata","map","idgenres","genrename","chapterlist","idchapter","description","datachapter","key","wordBreak","overflow","chaptername","getServerSideProps","query","id","res","fetch","json","mapStateToProps","state","novelReducer"],"mappings":"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IAAA,IAAI,EAAG;AAFX,KAGI;AAAG,IAAA,SAAS,EAAC;AAAb,KAAwBE,WAAW,CAACI,WAApC,CAHJ,CADJ,EAMI,MAAC,OAAD;AAAS,IAAA,QAAQ;AAAjB,IANJ,CADF,CADN,CAdJ,CADJ,CADJ,CAjFJ,CADJ;AAsHH,CAvHD;;AAwHA,OAAO,eAAeC,kBAAf,CAAkC;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAlC,EAAqD;AACxD;AACA;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,kCAAiCF,EAAG,EAAtC,CAAvB;AACA,QAAMzB,IAAI,GAAG,MAAM0B,GAAG,CAACE,IAAJ,EAAnB;AACA,SAAO;AACH7B,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAEA;AADH;AADJ,GAAP;AAKH,C,CACD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AACA,SAAS6B,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHC,IAAAA,YAAY,EAAED,KAAK,CAACC;AADjB,GAAP;AAGH;;AAED,eAAezD,OAAO,CAACuD,eAAD,EAAkB;AAAE/C,EAAAA;AAAF,CAAlB,CAAP,CAAwCgB,MAAxC,CAAf","sourcesContent":["import 'isomorphic-unfetch'\r\nimport Link from 'next/link'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\nimport { Helmet } from 'react-helmet';\r\nimport Layout from '../../components/MyLayout'\r\nimport { useRouter } from 'next/router';\r\nimport { saveNovel } from '../../redux/actions/novelActions'\r\nimport {\r\n    Button,\r\n    Container,\r\n    Divider,\r\n    Grid,\r\n    Header,\r\n    Icon,\r\n    Image,\r\n    List,\r\n    Menu,\r\n    Segment,\r\n    Sidebar,\r\n    Visibility,\r\n    Item,\r\n    Label,\r\n    Tab\r\n} from 'semantic-ui-react';\r\n\r\nconst Truyen = props => {\r\n    return (\r\n        <Layout>\r\n            <style>\r\n                {`\r\n  html, body {\r\n    background-color: #f2f3f5 !important;\r\n  }\r\n}\r\n`}\r\n            </style>\r\n            <Helmet>\r\n                <title>{`${props.data.novelsname}`} - YYtruyen</title>\r\n                <meta name=\"description\" content={`Truyện ${props.data.novelsname} là tác phẩm của tác giả ${ props.data.author}, tiến trình: ${ props.data.status}. Vào yytruyen.com để đọc những chương mới nhất của tác phẩm này nhé  `} />\r\n                <meta name=\"theme-color\" content=\"#008f68\" />\r\n                <meta name=\"keywords\" content=\"đọc truyện online, truyện online, truyện ngôn tình, truyện kiếm hiệp, truyện ngược, sủng\" />\r\n                <meta property=\"og:title\" content={`${ props.data.novelsname}`} />\r\n                <meta property=\"og:type\" content=\"book\" />\r\n                <meta property=\"og:image\" content={`${ props.data.cover}`} />\r\n                <meta property=\"og:description\" content={`${ props.data.des}`} />\r\n                <meta property=\"og:site_name\" content=\"Yytruyen.com\" />\r\n                <meta property=\"og:url\" content={`http://yytruyen.com/truyen/${ props.data.idnovels}`} />\r\n                <meta property=\"book:author\" content={`${ props.data.author}`} />\r\n                <meta property=\"og:image:width\" content=\"200\" />\r\n                <meta property=\"og:image:height\" content=\"300\" />\r\n\r\n                <script type=\"application/ld+json\">{`\r\n                {\r\n                \"@context\": \"http://schema.org\",\r\n                \"url\": \"http://yytruyen.com/truyen/${ props.data.idnovels}\",\r\n                \"image\": \"${ props.data.cover}\",\r\n                \"@type\": \"Book\",\r\n                \"name\": \"${ props.data.novelsname}\",\r\n                \"author\": \"${ props.data.author}\",\r\n                \"description\": \"${ props.data.des}\"\r\n                }\r\n                `}</script>\r\n            </Helmet>\r\n            <Segment\r\n                inverted\r\n                style={{ maxHeight: '32.625rem', padding: '1em 0em' }}\r\n                vertical\r\n            >\r\n                <div className='book-info'>\r\n                    <img className='glass_background-img' src={ props.data.cover} />\r\n                    <Container style={{}}>\r\n                        <Grid>\r\n                            <Grid.Column mobile={16} tablet={4} computer={4}>\r\n                                <Image fluid className='item-img' src={ props.data.cover} style={{ height: '22.75rem' }} />\r\n                            </Grid.Column>\r\n                            <Grid.Column mobile={16} tablet={12} computer={12}>\r\n                                <Item.Group textAlign='left'>\r\n                                    <Item.Content>\r\n                                        <Item.Header className='book-title' as='h2'>{ props.data.novelsname}</Item.Header>\r\n                                    </Item.Content>\r\n                                    <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\r\n                                        <span className='label'>Author:</span> { props.data.author}\r\n                                    </Item.Extra>\r\n                                    <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\r\n                                        Genres: { props.data.genresdata.map(genresdata => (\r\n                                        <Link as={`/theloai/${genresdata.idgenres}/1`} href={`/theloai/[id]/[page]`}>\r\n                                            <Label as='a' color='yellow'>\r\n                                                <Label.Detail>{genresdata.genrename}</Label.Detail>\r\n                                            </Label>\r\n\r\n                                        </Link>\r\n                                    ))}\r\n                                    </Item.Extra>\r\n                                    <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\r\n                                        <span className='label'>Status:</span> { props.data.status}\r\n                                    </Item.Extra>\r\n                                </Item.Group>\r\n                                <Link\r\n                                    as={`/doc/${ props.data.idnovels}/${ props.data.chapterlist[0].idchapter}`}\r\n                                    href={`/doc/[id]/[chapter]`}>\r\n                                    <Button size='huge' color='yellow'>READ</Button>\r\n                                </Link>\r\n\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Container>\r\n                </div>\r\n            </Segment>\r\n            <Container>\r\n                <Grid>\r\n                    <Grid.Column className='detail-container' mobile={16} tablet={16} computer={16}>\r\n                        <Divider horizontal>\r\n                            <Header className='title-name-bottom' as='h2'>Synopsis</Header>\r\n                        </Divider>\r\n\r\n                        <Item.Group textAlign='left'>\r\n                            <Item.Description className='content'>\r\n                                {ReactHtmlParser( props.data.description)}\r\n                            </Item.Description>\r\n                        </Item.Group>\r\n                        <Divider horizontal>\r\n                            <Header className='title-name-bottom' as='h2'>Chapter</Header>\r\n                        </Divider>\r\n\r\n                        <Grid>\r\n                            { props.data.chapterlist.map((datachapter, key) => (\r\n                                <Grid.Column mobile={16} tablet={8} computer={8} style={{ wordBreak: 'break-word', overflow: 'hidden' }}>\r\n                                    <Link\r\n                                        as={`/doc/${ props.data.idnovels}/${datachapter.idchapter}`}\r\n                                        href={`/doc/[id]/[chapter]`}>\r\n                                        <a className='chapter'>{datachapter.chaptername}</a>\r\n                                    </Link>\r\n                                    <Divider inverted></Divider>\r\n                                </Grid.Column>\r\n\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Container>\r\n\r\n\r\n        </Layout>\r\n    )\r\n}\r\nexport async function getServerSideProps({ query: { id } }) {\r\n    // `getStaticProps` is invoked on the server-side,\r\n    // so this `fetcher` function will be executed on the server-side.\r\n    const res = await fetch(`http://localhost:8001/novel?id=${id}`)\r\n    const data = await res.json()\r\n    return {\r\n        props: {\r\n            data: data\r\n        },\r\n    }\r\n}\r\n// class Truyen extends React.Component {\r\n//     // static getInitialProps({ store }) { }\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n//     componentDidMount() {\r\n//         console.log( props.data)\r\n//          props.saveNovel( props.data)\r\n//     }\r\n\r\n//     // static async getInitialProps({ query: { id } }) {\r\n//     //     // eslint-disable-next-line no-undef\r\n//     //     // const { id } = context.query\r\n//     //     // const router = useRouter()\r\n//     //     // const { id } = router.query\r\n//     //     const res = await fetch(`http://localhost:8001/novel?id=${id}`)\r\n//     //     const json = await res.json()\r\n//     //     // console.log(json)\r\n\r\n//     //     return { data: json }\r\n//     // }\r\n\r\n//     render() {\r\n//         console.log( props)\r\n\r\n//         return (\r\n//             <Layout>\r\n//                 <style>\r\n//                     {`\r\n//       html, body {\r\n//         background-color: #f2f3f5 !important;\r\n//       }\r\n//     }\r\n//     `}\r\n//                 </style>\r\n//                 <Helmet>\r\n//                     <title>{`${ props.data.novelsname}`} - YYtruyen</title>\r\n//                     <meta name=\"description\" content={`Truyện ${ props.data.novelsname} là tác phẩm của tác giả ${ props.data.author}, tiến trình: ${ props.data.status}. Vào yytruyen.com để đọc những chương mới nhất của tác phẩm này nhé  `} />\r\n//                     <meta name=\"theme-color\" content=\"#008f68\" />\r\n//                     <meta name=\"keywords\" content=\"đọc truyện online, truyện online, truyện ngôn tình, truyện kiếm hiệp, truyện ngược, sủng\" />\r\n//                     <meta property=\"og:title\" content={`${ props.data.novelsname}`} />\r\n//                     <meta property=\"og:type\" content=\"book\" />\r\n//                     <meta property=\"og:image\" content={`${ props.data.cover}`} />\r\n//                     <meta property=\"og:description\" content={`${ props.data.des}`} />\r\n//                     <meta property=\"og:site_name\" content=\"Yytruyen.com\" />\r\n//                     <meta property=\"og:url\" content={`http://yytruyen.com/truyen/${ props.data.idnovels}`} />\r\n//                     <meta property=\"book:author\" content={`${ props.data.author}`} />\r\n//                     <meta property=\"og:image:width\" content=\"200\" />\r\n//                     <meta property=\"og:image:height\" content=\"300\" />\r\n\r\n//                     <script type=\"application/ld+json\">{`\r\n//                     {\r\n//                     \"@context\": \"http://schema.org\",\r\n//                     \"url\": \"http://yytruyen.com/truyen/${ props.data.idnovels}\",\r\n//                     \"image\": \"${ props.data.cover}\",\r\n//                     \"@type\": \"Book\",\r\n//                     \"name\": \"${ props.data.novelsname}\",\r\n//                     \"author\": \"${ props.data.author}\",\r\n//                     \"description\": \"${ props.data.des}\"\r\n//                     }\r\n//                     `}</script>\r\n//                 </Helmet>\r\n//                 <Segment\r\n//                     inverted\r\n//                     style={{ maxHeight: '32.625rem', padding: '1em 0em' }}\r\n//                     vertical\r\n//                 >\r\n//                     <div className='book-info'>\r\n//                         <img className='glass_background-img' src={ props.data.cover} />\r\n//                         <Container style={{}}>\r\n//                             <Grid>\r\n//                                 <Grid.Column mobile={16} tablet={4} computer={4}>\r\n//                                     <Image fluid className='item-img' src={ props.data.cover} style={{ height: '22.75rem' }} />\r\n//                                 </Grid.Column>\r\n//                                 <Grid.Column mobile={16} tablet={12} computer={12}>\r\n//                                     <Item.Group textAlign='left'>\r\n//                                         <Item.Content>\r\n//                                             <Item.Header className='book-title' as='h2'>{ props.data.novelsname}</Item.Header>\r\n//                                         </Item.Content>\r\n//                                         <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\r\n//                                             <span className='label'>Author:</span> { props.data.author}\r\n//                                         </Item.Extra>\r\n//                                         <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\r\n//                                             Genres: { props.data.genresdata.map(genresdata => (\r\n//                                             <Link as={`/theloai/${genresdata.idgenres}/1`} href={`/theloai/[id]/[page]`}>\r\n//                                                 <Label as='a' color='yellow'>\r\n//                                                     <Label.Detail>{genresdata.genrename}</Label.Detail>\r\n//                                                 </Label>\r\n\r\n//                                             </Link>\r\n//                                         ))}\r\n//                                         </Item.Extra>\r\n//                                         <Item.Extra textAlign='left' style={{ marginTop: 10 }}>\r\n//                                             <span className='label'>Status:</span> { props.data.status}\r\n//                                         </Item.Extra>\r\n//                                     </Item.Group>\r\n//                                     <Link\r\n//                                         as={`/doc/${ props.data.idnovels}/${ props.data.chapterlist[0].idchapter}`}\r\n//                                         href={`/doc/[id]/[chapter]`}>\r\n//                                         <Button size='huge' color='yellow'>READ</Button>\r\n//                                     </Link>\r\n\r\n//                                 </Grid.Column>\r\n//                             </Grid>\r\n//                         </Container>\r\n//                     </div>\r\n//                 </Segment>\r\n//                 <Container>\r\n//                     <Grid>\r\n//                         <Grid.Column className='detail-container' mobile={16} tablet={16} computer={16}>\r\n//                             <Divider horizontal>\r\n//                                 <Header className='title-name-bottom' as='h2'>Synopsis</Header>\r\n//                             </Divider>\r\n\r\n//                             <Item.Group textAlign='left'>\r\n//                                 <Item.Description className='content'>\r\n//                                     {ReactHtmlParser( props.data.description)}\r\n//                                 </Item.Description>\r\n//                             </Item.Group>\r\n//                             <Divider horizontal>\r\n//                                 <Header className='title-name-bottom' as='h2'>Chapter</Header>\r\n//                             </Divider>\r\n\r\n//                             <Grid>\r\n//                                 { props.data.chapterlist.map((datachapter, key) => (\r\n//                                     <Grid.Column mobile={16} tablet={8} computer={8} style={{ wordBreak: 'break-word', overflow: 'hidden' }}>\r\n//                                         <Link\r\n//                                             as={`/doc/${ props.data.idnovels}/${datachapter.idchapter}`}\r\n//                                             href={`/doc/[id]/[chapter]`}>\r\n//                                             <a className='chapter'>{datachapter.chaptername}</a>\r\n//                                         </Link>\r\n//                                         <Divider inverted></Divider>\r\n//                                     </Grid.Column>\r\n\r\n//                                 ))}\r\n//                             </Grid>\r\n//                         </Grid.Column>\r\n//                     </Grid>\r\n//                 </Container>\r\n\r\n\r\n//             </Layout>\r\n//         )\r\n//     }\r\n// }\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        novelReducer: state.novelReducer\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { saveNovel })(Truyen);\r\n"]},"metadata":{},"sourceType":"module"}