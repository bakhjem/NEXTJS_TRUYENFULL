{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { API_URL } from '../../../config/config';\n\nvar toUrl = function toUrl(host, route) {\n  return \"<url><loc>http://www.\".concat(host).concat(route, \"</loc></url>\");\n};\n\nvar createSitemap = function createSitemap(host, routes, novel) {\n  return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n    <urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n    \".concat(routes.map(function (route) {\n    return toUrl(host, route);\n  }).join(\"\"), \"\\n    \").concat(novel.map(function (novels) {\n    return toUrl(host, \"/novel/\".concat(novels.idnovel, \"1\"));\n  }).join(\"\"), \"\\n    </urlset>\");\n};\n\nvar Sitemap = function Sitemap(props) {\n  var routes = [\"\", \"/about\", \"/novel\"];\n  var novel = props.data; //You can fetch the products from an API\n\n  var sitemap = createSitemap(props.req.headers.host, routes, novel.data);\n  props.res.setHeader(\"Content-Type\", \"text/xml\");\n  props.res.write(sitemap);\n  props.res.end();\n  return props.res;\n}; // Sitemap.getInitialProps = ({ res, req }) => {\n//   const routes = [\"\", \"/about\", \"/novel\"];\n//   const products = [123];  //You can fetch the products from an API\n//   const sitemap = createSitemap(req.headers.host, routes, products);\n//   res.setHeader(\"Content-Type\", \"text/xml\");\n//   res.write(sitemap);\n//   res.end();\n//   return res;\n// };\n\n\n_c = Sitemap;\n\nSitemap.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var page, req, res, ress, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            page = context.query.page;\n            req = context.req;\n            res = context.res;\n            _context.next = 5;\n            return fetch(\"\".concat(API_URL, \"update?page=\").concat(page));\n\n          case 5:\n            ress = _context.sent;\n            _context.next = 8;\n            return ress.json();\n\n          case 8:\n            json = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: json,\n              res: res,\n              req: req\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Sitemap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sitemap\");","map":{"version":3,"sources":["C:/Users/bakhjem/Desktop/nhattin/nextjstruyen - Copy/pages/sitemap/[page]/sitemap.xml.js"],"names":["API_URL","toUrl","host","route","createSitemap","routes","novel","map","join","novels","idnovel","Sitemap","props","data","sitemap","req","headers","res","setHeader","write","end","getInitialProps","context","page","query","fetch","ress","json"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,wBAAxB;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAOC,KAAP;AAAA,wCACYD,IADZ,SACmBC,KADnB;AAAA,CAAd;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CACpBF,IADoB,EAEpBG,MAFoB,EAGpBC,KAHoB;AAAA,uIAMhBD,MAAM,CAACE,GAAP,CAAW,UAACJ,KAAD;AAAA,WAAWF,KAAK,CAACC,IAAD,EAAOC,KAAP,CAAhB;AAAA,GAAX,EAA0CK,IAA1C,CAA+C,EAA/C,CANgB,mBAOhBF,KAAK,CAACC,GAAN,CAAU,UAACE,MAAD;AAAA,WAAYR,KAAK,CAACC,IAAD,mBAAiBO,MAAM,CAACC,OAAxB,OAAjB;AAAA,GAAV,EAAgEF,IAAhE,CAAqE,EAArE,CAPgB;AAAA,CAAtB;;AAUA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAMP,MAAM,GAAG,CAAC,EAAD,EAAK,QAAL,EAAe,QAAf,CAAf;AACA,MAAMC,KAAK,GAAGM,KAAK,CAACC,IAApB,CAFyB,CAEE;;AAE3B,MAAMC,OAAO,GAAGV,aAAa,CAACQ,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBd,IAAnB,EAAyBG,MAAzB,EAAiCC,KAAK,CAACO,IAAvC,CAA7B;AAEAD,EAAAA,KAAK,CAACK,GAAN,CAAUC,SAAV,CAAoB,cAApB,EAAoC,UAApC;AACAN,EAAAA,KAAK,CAACK,GAAN,CAAUE,KAAV,CAAgBL,OAAhB;AACAF,EAAAA,KAAK,CAACK,GAAN,CAAUG,GAAV;AACA,SAAOR,KAAK,CAACK,GAAb;AACD,CAVD,C,CAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;KArBMN,O;;AAsBNA,OAAO,CAACU,eAAR;AAAA,sEAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,IADgB,GACPD,OAAO,CAACE,KADD,CAChBD,IADgB;AAElBR,YAAAA,GAFkB,GAEZO,OAAO,CAACP,GAFI;AAGlBE,YAAAA,GAHkB,GAGZK,OAAO,CAACL,GAHI;AAAA;AAAA,mBAILQ,KAAK,WAAIzB,OAAJ,yBAA0BuB,IAA1B,EAJA;;AAAA;AAIlBG,YAAAA,IAJkB;AAAA;AAAA,mBAKLA,IAAI,CAACC,IAAL,EALK;;AAAA;AAKlBA,YAAAA,IALkB;AAAA,6CAOjB;AAAEd,cAAAA,IAAI,EAAEc,IAAR;AAAcV,cAAAA,GAAG,EAAHA,GAAd;AAAmBF,cAAAA,GAAG,EAAHA;AAAnB,aAPiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAeJ,OAAf","sourcesContent":["import { API_URL } from '../../../config/config'\r\nconst toUrl = (host, route) =>\r\n  `<url><loc>http://www.${host}${route}</loc></url>`;\r\n\r\nconst createSitemap = (\r\n  host,\r\n  routes,\r\n  novel\r\n) => `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n    ${routes.map((route) => toUrl(host, route)).join(\"\")}\r\n    ${novel.map((novels) => toUrl(host, `/novel/${novels.idnovel}1`)).join(\"\")}\r\n    </urlset>`;\r\n\r\nconst Sitemap = (props) => {\r\n  const routes = [\"\", \"/about\", \"/novel\"];\r\n  const novel = props.data;  //You can fetch the products from an API\r\n\r\n  const sitemap = createSitemap(props.req.headers.host, routes, novel.data);\r\n\r\n  props.res.setHeader(\"Content-Type\", \"text/xml\");\r\n  props.res.write(sitemap);\r\n  props.res.end();\r\n  return props.res;\r\n};\r\n\r\n// Sitemap.getInitialProps = ({ res, req }) => {\r\n//   const routes = [\"\", \"/about\", \"/novel\"];\r\n//   const products = [123];  //You can fetch the products from an API\r\n//   const sitemap = createSitemap(req.headers.host, routes, products);\r\n\r\n//   res.setHeader(\"Content-Type\", \"text/xml\");\r\n//   res.write(sitemap);\r\n//   res.end();\r\n//   return res;\r\n// };\r\nSitemap.getInitialProps = async (context) => {\r\n  const { page } = context.query\r\n  const req = context.req\r\n  const res = context.res\r\n  const ress = await fetch(`${API_URL}update?page=${page}`)\r\n  const json = await ress.json()\r\n  // console.log(json)\r\n  return { data: json, res, req }\r\n\r\n}\r\nexport default Sitemap;"]},"metadata":{},"sourceType":"module"}