{"ast":null,"code":"import { API_URL } from '../../../config/config';\n\nconst toUrl = (host, route) => `<url><loc>http://www.${host}${route}</loc></url>`;\n\nconst createSitemap = (host, routes, novel) => `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    ${routes.map(route => toUrl(host, route)).join(\"\")}\n    ${novel.map(novels => toUrl(host, `/novel/${novels.idnovel}1`)).join(\"\")}\n    </urlset>`;\n\nconst Sitemap = props => {\n  const routes = [\"\", \"/about\", \"/novel\"];\n  const novel = props.data; //You can fetch the products from an API\n\n  const sitemap = createSitemap(props.req.headers.host, routes, novel.data);\n  props.res.setHeader(\"Content-Type\", \"text/xml\");\n  props.res.write(sitemap);\n  props.res.end();\n  return props.res;\n}; // Sitemap.getInitialProps = ({ res, req }) => {\n//   const routes = [\"\", \"/about\", \"/novel\"];\n//   const products = [123];  //You can fetch the products from an API\n//   const sitemap = createSitemap(req.headers.host, routes, products);\n//   res.setHeader(\"Content-Type\", \"text/xml\");\n//   res.write(sitemap);\n//   res.end();\n//   return res;\n// };\n\n\nSitemap.getInitialProps = async context => {\n  const {\n    page\n  } = context.query;\n  const req = context.req;\n  const res = context.res;\n  const ress = await fetch(`${API_URL}update?page=${page}`);\n  const json = await ress.json(); // console.log(json)\n\n  return {\n    data: json,\n    res,\n    req\n  };\n};\n\nexport default Sitemap;","map":{"version":3,"sources":["C:/Users/bakhjem/Desktop/nhattin/nextjstruyen - Copy/pages/sitemap/[page]/sitemap.xml.js"],"names":["API_URL","toUrl","host","route","createSitemap","routes","novel","map","join","novels","idnovel","Sitemap","props","data","sitemap","req","headers","res","setHeader","write","end","getInitialProps","context","page","query","ress","fetch","json"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;;AACA,MAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,KAAP,KACX,wBAAuBD,IAAK,GAAEC,KAAM,cADvC;;AAGA,MAAMC,aAAa,GAAG,CACpBF,IADoB,EAEpBG,MAFoB,EAGpBC,KAHoB,KAIhB;AACN;AACA,MAAMD,MAAM,CAACE,GAAP,CAAYJ,KAAD,IAAWF,KAAK,CAACC,IAAD,EAAOC,KAAP,CAA3B,EAA0CK,IAA1C,CAA+C,EAA/C,CAAmD;AACzD,MAAMF,KAAK,CAACC,GAAN,CAAWE,MAAD,IAAYR,KAAK,CAACC,IAAD,EAAQ,UAASO,MAAM,CAACC,OAAQ,GAAhC,CAA3B,EAAgEF,IAAhE,CAAqE,EAArE,CAAyE;AAC/E,cARA;;AAUA,MAAMG,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAMP,MAAM,GAAG,CAAC,EAAD,EAAK,QAAL,EAAe,QAAf,CAAf;AACA,QAAMC,KAAK,GAAGM,KAAK,CAACC,IAApB,CAFyB,CAEE;;AAE3B,QAAMC,OAAO,GAAGV,aAAa,CAACQ,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBd,IAAnB,EAAyBG,MAAzB,EAAiCC,KAAK,CAACO,IAAvC,CAA7B;AAEAD,EAAAA,KAAK,CAACK,GAAN,CAAUC,SAAV,CAAoB,cAApB,EAAoC,UAApC;AACAN,EAAAA,KAAK,CAACK,GAAN,CAAUE,KAAV,CAAgBL,OAAhB;AACAF,EAAAA,KAAK,CAACK,GAAN,CAAUG,GAAV;AACA,SAAOR,KAAK,CAACK,GAAb;AACD,CAVD,C,CAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACAN,OAAO,CAACU,eAAR,GAA0B,MAAOC,OAAP,IAAmB;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAWD,OAAO,CAACE,KAAzB;AACA,QAAMT,GAAG,GAAGO,OAAO,CAACP,GAApB;AACA,QAAME,GAAG,GAAGK,OAAO,CAACL,GAApB;AACA,QAAMQ,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAE1B,OAAQ,eAAcuB,IAAK,EAA/B,CAAxB;AACA,QAAMI,IAAI,GAAG,MAAMF,IAAI,CAACE,IAAL,EAAnB,CAL2C,CAM3C;;AACA,SAAO;AAAEd,IAAAA,IAAI,EAAEc,IAAR;AAAcV,IAAAA,GAAd;AAAmBF,IAAAA;AAAnB,GAAP;AAED,CATD;;AAUA,eAAeJ,OAAf","sourcesContent":["import { API_URL } from '../../../config/config'\r\nconst toUrl = (host, route) =>\r\n  `<url><loc>http://www.${host}${route}</loc></url>`;\r\n\r\nconst createSitemap = (\r\n  host,\r\n  routes,\r\n  novel\r\n) => `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n    ${routes.map((route) => toUrl(host, route)).join(\"\")}\r\n    ${novel.map((novels) => toUrl(host, `/novel/${novels.idnovel}1`)).join(\"\")}\r\n    </urlset>`;\r\n\r\nconst Sitemap = (props) => {\r\n  const routes = [\"\", \"/about\", \"/novel\"];\r\n  const novel = props.data;  //You can fetch the products from an API\r\n\r\n  const sitemap = createSitemap(props.req.headers.host, routes, novel.data);\r\n\r\n  props.res.setHeader(\"Content-Type\", \"text/xml\");\r\n  props.res.write(sitemap);\r\n  props.res.end();\r\n  return props.res;\r\n};\r\n\r\n// Sitemap.getInitialProps = ({ res, req }) => {\r\n//   const routes = [\"\", \"/about\", \"/novel\"];\r\n//   const products = [123];  //You can fetch the products from an API\r\n//   const sitemap = createSitemap(req.headers.host, routes, products);\r\n\r\n//   res.setHeader(\"Content-Type\", \"text/xml\");\r\n//   res.write(sitemap);\r\n//   res.end();\r\n//   return res;\r\n// };\r\nSitemap.getInitialProps = async (context) => {\r\n  const { page } = context.query\r\n  const req = context.req\r\n  const res = context.res\r\n  const ress = await fetch(`${API_URL}update?page=${page}`)\r\n  const json = await ress.json()\r\n  // console.log(json)\r\n  return { data: json, res, req }\r\n\r\n}\r\nexport default Sitemap;"]},"metadata":{},"sourceType":"module"}